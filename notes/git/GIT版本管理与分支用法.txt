                                                GIT版本管理与分支用法

在一个项目中我们可以用GIT管理多个远程仓库。我们可以动态的添加库，管理库中的分支。

GIT每一次提交都会生成一个commit对象，它包含本次提交生成的快照及指向上次提交commit对象的指针。因此，每次提交的commit对象至少有一个祖先，即上次提交的commit对象（第一次提交除外，合并会导致commit对象有多个祖先）。

GIT用指向最后一次提交的commit对象指针来标识每个分支的状态，这个指针会在每次提交后自动向前移动。我们用一个HEAD指针来标识当前操作的是哪个分支，切换分支会导致HEAD指针的位置发生变化。

远程分支标记了远程仓库的状态，它不可以被人为更改，只有在拉取远程仓库中才能被更新。我们用(远程仓库名)/(分支名)的方式来表示一个远程分支。我们可以将远程分支合并到当前分支，也可以检出一份本地分支来跟跟踪远程分支的变化（用于查看和编辑远程分支）。我们在本地分支中完成开发任务后，将本地分支推送到远程仓库，远程仓库中远程分支的状态就得到了更新。我们再拉取远程仓库的更新，本机中远程分支的状态就得到了更新。

分支可以互相合并和衍合。分支的合并即为将两个分支的末端及这两个分支的共同祖先做一次三方合并计算，将计算的结果作一新的快照，并并自动创建一个指向它的commit。我们把这个特殊的commit 称作合并提交（merge commit），因为它的祖先不止一个。衍合通常是把当前分支衍合到另一个分支，即为把我们在当前分支提交的改变作为一次新的提交并入目标分支。衍合的结果会创建一个新的commit对象，它指向的快照包含了当前分支提交的所有改变，它的祖先结点为目标分支上次提交的commit对象，同时更新当前分支及目标分支的状态。衍合可以使远程分支的提交历史更加清晰，但是永远不要衍合那些已经推送到公共仓库的更新。

1. 远程仓库操作
    添加远程仓库：
        $ git clone git://github.com/schacon/ticgit.git
        $ git remote add pb git://github.com/paulboone/ticgit.git
        $ git remote
        $ git remote -v

    从远程仓库中抓取数据
        $ git fetch pb

    推送到远程仓库：
        $ git push [remote-name] [branch-name]

    查看远程仓库信息：
        $ git remote show origin
        * remote origin
        URL: git@github.com:defunkt/github.git
        Remote branch merged with 'git pull' while on branch issues
        issues
        Remote branch merged with 'git pull' while on branch master
        master
        New remote branches (next fetch will store in remotes/origin)
        caching
        Stale tracking branches (use 'git remote prune')
        libwalker
        walker2
        Tracked remote branches
        acl
        apiv2
        dashboard2
        issues
        master
        postgres
        Local branch pushed with 'git push'
        master:master

    远程仓库的删除与重命名：
        $ git remote rename pb paul
        $ git remote rm paul

2. 分支操作
    新建分支
        $ git branch testing    $ git checkout testing
        $ git checkout -b iss53

    合并（假设当前分支为hotfix，合并到master）
        $ git checkout master
        $ git merge hotfix

    删除分支：
        $ git branch -d hotfix
        $ git branch -D hotfix

    查看分支：
        $ git branch
        $ git branch -v
        $ git branch --merged
        $ git branch --no-merged

    推送远程分支：
        $ git push (远程仓库名) (分支名)
        $ git push [远程名] [本地分支]:[远程分支]

    跟踪分支（在跟踪分支里可以直接使用git push git pull，git 会自动判断源和目的）
        $ git checkout -b sf origin/serverfix
        $ git checkout --track origin/serverfix

    删除远程分支：
        $ git push [远程名] :[分支名]

    衍合：
        $ git checkout experiment
        $ git rebase master

第一章 起步

1.2 GIT的历史
    GIT的目标：1）速度；2）简单的设计；3）对非线性开发模式的强力支持；4）完全分布式；5）有能力高效管理超大规模项目。

1.3.5 三种状态
    任何一个文件，在GIT内部有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。对应三个工作区域：GIT本地数据目录，工作目录及暂存区域。
    GIT工作流程：1）将文件checkout到工作目录中；2）在工作目录中对文件进行编辑；3）对修改后的文件进行快照，然后保存的暂存区域；4）提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。

1.4 安装GIT
    yum install git-core      or   apt-get install git

1.5 初次运行GIT前的配置
    GIT配置分三个层次：系统级，用户级和项目级。系统级适用于所有用户；用户级适用于当前用户；项目级只适用于当前项目。分别对应配置文件为：/etc/gitconfig，~/.gitconfig,当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）。git config 选项分别为system，global和无选项。每一级别配置都会覆盖上一级别的的相同配置项。
    在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 C:\Documents and Settings\$USER。此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。

    GIT必须设置的两个选项：
        $ git config --global user.name "John Doe"
        $ git config --global user.email johndoe@example.com

    GIT查看配置：
        $ git config --list             // 列出所有配置
        $ git config user.name          // 仅列出user.name

第二章 GIT基础

2.1 取得项目的GIT仓库
    1）创建GIT仓库
        $ git init                      // 将当前目录纳入GIT管理，这时会在目录下出现一个.git目录。
    2）从现有仓库克隆
        $ git clone git://github.com/schacon/grit.git [指定存放目录]      // 如果不指定目录，GIT会自动创建一个目录为grit

2.2 记录每次更新到仓库
    文件状态变化周期如图image-2.1.png。
    检查当前文件状态      git status
    跟踪新文件     git add file       // 跟踪后属于暂存状态
    暂存已修改文件      git add file
    忽略某些文件    .gitignore
    查看暂存的修改   git diff --staged
    查看未暂存的修改   git diff
    提交    git commit      跳过使用暂存区域    git commit -a
    删除    git rm    删除已暂存的文件    git rm -f     从仓库中删除但保留本地文件    git rm --cached
    移动   git mv

2.3 查看历史     git log

2.4 撤销操作
    修改最后一次提交     git commit --amend
    取消已经暂存的文件     git reset HEAD file
    取消对文件的修改     git checkout -- file

2.6 标签
    列出已有标签：
        $ git tag
        v0.1
        v1.3
    搜索相应标签：
        $ git tag -l 'v1.4.2.*'
        v1.4.2.1
        v1.4.2.2
        v1.4.2.3
        v1.4.2.4
    新建标签：
        $ git tag -a v1.4 -m 'my version 1.4'
        $ git tag
        v0.1
        v1.3
        v1.4
    查看相应标签的版本信息：
        $ git show v1.4
        tag v1.4
        Tagger: Scott Chacon <schacon@gee-mail.com>
        Date:   Mon Feb 9 14:45:11 2009 -0800

        my version 1.4

        commit 15027957951b64cf874c3557a0f3547bd83b3ff6
        Merge: 4a447f7... a6b4c97...
        Author: Scott Chacon <schacon@gee-mail.com>
        Date:   Sun Feb 8 19:02:46 2009 -0800

            Merge branch 'experiment'
    轻量级标签：
        $ git tag v1.4-lw
        $ git tag
        v0.1
        v1.3
        v1.4
        v1.4-lw
        v1.5
    分享标签：
        $ git push origin v1.5
        $ git push origin --tags

2.7 技巧和窍门
    自动补全：
        在.bashrc中添加：source ~/.git-completion.bash。若想对所有用户生效，则复制到 /etc/bash_completion.d/ 目录中。
    命令别名：
        $ git config --global alias.co checkout
        $ git config --global alias.br branch
        $ git config --global alias.ci commit
        $ git config --global alias.st status
        $ git config --global alias.unstage 'reset HEAD --'
        $ git config --global alias.last 'log -1 HEAD'


